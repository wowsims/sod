package mage

import (
	"github.com/wowsims/sod/sim/core"
	"github.com/wowsims/sod/sim/core/proto"
	"github.com/wowsims/sod/sim/core/stats"
)

var ItemSetNetherwindInsight = core.NewItemSet(core.ItemSet{
	Name: "Netherwind Insight",
	Bonuses: map[int32]core.ApplyEffect{
		2: func(agent core.Agent) {
			mage := agent.(MageAgent).GetMage()
			mage.applyT2Damage2PBonus()
		},
		4: func(agent core.Agent) {
			mage := agent.(MageAgent).GetMage()
			mage.applyT2Damage4PBonus()
		},
		6: func(agent core.Agent) {
			mage := agent.(MageAgent).GetMage()
			mage.applyT2Damage6PBonus()
		},
	},
})

// Decreases the threat generated by your Fire spells by 20%.
func (mage *Mage) applyT2Damage2PBonus() {
	label := "S03 - Item - T2 - Mage - Damage 2P Bonus"
	if mage.HasAura(label) {
		return
	}

	mage.RegisterAura(core.Aura{
		Label: label,
		OnInit: func(aura *core.Aura, sim *core.Simulation) {
			for _, spell := range mage.Spellbook {
				if spell.SpellSchool == core.SpellSchoolFire && spell.Flags.Matches(SpellFlagMage) {
					spell.ThreatMultiplier *= .80
				}
			}
		},
	})
}

// Your Pyroblast deals 20% increased damage to targets afflicted with your Fireball's periodic effect.
func (mage *Mage) applyT2Damage4PBonus() {
	if !mage.Talents.Pyroblast {
		return
	}

	label := "S03 - Item - T2 - Mage - Damage 4P Bonus"
	if mage.HasAura(label) {
		return
	}

	mage.RegisterAura(core.Aura{
		Label: label,
		OnInit: func(aura *core.Aura, sim *core.Simulation) {
			fireballSpells := core.FilterSlice(mage.Fireball, func(spell *core.Spell) bool { return spell != nil })

			for _, spell := range mage.Pyroblast {
				if spell == nil {
					continue
				}

				oldApplyEffects := spell.ApplyEffects
				spell.ApplyEffects = func(sim *core.Simulation, target *core.Unit, spell *core.Spell) {
					modifier := 0.0

					for _, spell := range fireballSpells {
						if spell.Dot(target).IsActive() {
							modifier += 0.20
							break
						}
					}

					spell.DamageMultiplierAdditive += modifier
					oldApplyEffects(sim, target, spell)
					spell.DamageMultiplierAdditive -= modifier
				}
			}
		},
	})
}

// Your Fireball's periodic effect gains increased damage over its duration equal to 100% of its impact damage.
func (mage *Mage) applyT2Damage6PBonus() {
	label := "S03 - Item - T2 - Mage - Damage 6P Bonus"
	if mage.HasAura(label) {
		return
	}

	core.MakePermanent(mage.RegisterAura(core.Aura{
		ActionID: core.ActionID{SpellID: 467399},
		Label:    label,
		OnSpellHitDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
			if spell.SpellCode == SpellCode_MageFireball && result.Landed() {
				// Tested that this is calculated using the fireball damage WITHOUT defender mods (debuffs)
				mage.BonusFireballDoTAmount += result.DamagePostAttacker * 1.00 / float64(spell.Dot(result.Target).NumberOfTicks)
			}
		},
	}))
}

var ItemSetNetherwindMoment = core.NewItemSet(core.ItemSet{
	Name: "Netherwind Moment",
	Bonuses: map[int32]core.ApplyEffect{
		2: func(agent core.Agent) {
			mage := agent.(MageAgent).GetMage()
			mage.applyT2Healer2PBonus()
		},
		4: func(agent core.Agent) {
			mage := agent.(MageAgent).GetMage()
			mage.applyT2Healer4PBonus()
		},
		// Your Temporal Beacons caused by Mass Regeneration now last 30 sec.
		6: func(agent core.Agent) {
		},
	},
})

// Your Arcane Missiles refunds 10% of its base mana cost each time it deals damage.
func (mage *Mage) applyT2Healer2PBonus() {
	label := "S03 - Item - T2 - Mage - Healer 2P Bonus"
	if mage.HasAura(label) {
		return
	}

	manaMetrics := mage.NewManaMetrics(core.ActionID{SpellID: 467401})
	core.MakePermanent(mage.RegisterAura(core.Aura{
		Label: label,
		OnSpellHitDealt: func(aura *core.Aura, sim *core.Simulation, spell *core.Spell, result *core.SpellResult) {
			if spell.SpellCode == SpellCode_MageArcaneMissilesTick && result.Landed() {
				mage.AddMana(sim, mage.ArcaneMissiles[spell.Rank].Cost.BaseCost*0.1, manaMetrics)
			}
		},
	}))
}

// Arcane Blast gains a 10% additional change to trigger Missile Barrage, and Missile Barrage now affects Regeneration the same way it affects Arcane Missiles.
func (mage *Mage) applyT2Healer4PBonus() {
	if !mage.HasRune(proto.MageRune_RuneHandsArcaneBlast) || !mage.HasRune(proto.MageRune_RuneBeltMissileBarrage) {
		return
	}

	label := "S03 - Item - T2 - Mage - Healer 4P Bonus"
	if mage.HasAura(label) {
		return
	}

	mage.RegisterAura(core.Aura{
		Label: label,
		OnInit: func(aura *core.Aura, sim *core.Simulation) {
			mage.ArcaneBlastMissileBarrageChance += .10
		},
	})
}

var ItemSetIllusionistsAttire = core.NewItemSet(core.ItemSet{
	Name: "Illusionist's Attire",
	Bonuses: map[int32]core.ApplyEffect{
		// Increases damage done by Frost spells and effects by up to 14.
		2: func(agent core.Agent) {
			mage := agent.(MageAgent).GetMage()
			mage.AddStat(stats.FrostPower, 14)
		},
		3: func(agent core.Agent) {
			mage := agent.(MageAgent).GetMage()
			mage.applyZGFrost3PBonus()
		},
		5: func(agent core.Agent) {
			mage := agent.(MageAgent).GetMage()
			mage.applyZGFrost5PBonus()
		},
	},
})

// Increases the chance to trigger your Fingers of Frost rune by an additional 15%.
func (mage *Mage) applyZGFrost3PBonus() {
	if !mage.HasRune(proto.MageRune_RuneChestFingersOfFrost) {
		return
	}

	label := "S03 - Item - ZG - Mage - Frost 3P Bonus"
	if mage.HasAura(label) {
		return
	}

	mage.RegisterAura(core.Aura{
		Label: label,
		OnInit: func(aura *core.Aura, sim *core.Simulation) {
			mage.FingersOfFrostProcChance += .15
		},
	})
}

// Increases damage done by your Frostbolt and Spellfrost Bolt spells by 65%.
func (mage *Mage) applyZGFrost5PBonus() {
	label := "S03 - Item - ZG - Mage - Frost 5P Bonus"
	if mage.HasAura(label) {
		return
	}

	mage.RegisterAura(core.Aura{
		Label: label,
		OnInit: func(aura *core.Aura, sim *core.Simulation) {
			affectedSpells := core.FilterSlice(
				core.Flatten([][]*core.Spell{
					mage.Frostbolt,
					{mage.SpellfrostBolt},
				}), func(spell *core.Spell) bool { return spell != nil },
			)

			for _, spell := range affectedSpells {
				spell.DamageMultiplierAdditive += 0.65
			}
		},
	})
}
